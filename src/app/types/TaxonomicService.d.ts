/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Generic concept of a Service or Tool
 */
export interface TaxonomicService {
  /**
   * The unique digital identifier of the object
   */
  "ods:id"?: string;
  /**
   * The version of the object, each change generates a new version
   */
  "ods:version"?: number;
  /**
   * The timestamp that the object version was created in DiSSCo
   */
  "ods:created"?: string;
  /**
   * Modification date for specimen information
   */
  "dcterms:modified"?: string;
  /**
   * The FDO type of the object
   */
  "ods:type"?: string;
  /**
   * http://purl.org/dc/terms/license
   */
  "dcterms:license"?: string;
  /**
   * The current state of the object
   */
  state?: string;
  /**
   * Indicator for the language the service is written in, using ISO alpha-3/ISO 639-2
   */
  language?: string;
  /**
   * A fitting description about the service
   */
  description?: string;
  /**
   * A persistent identifier, a unique reference to the (Multi-Provider Regional or Thematic) Catalogue in the context of the EOSC Portal.
   */
  EOSC_serviceId?: string;
  /**
   * The taxonomic scope on which the service acts upon, e.g. the taxonomic level (genus, species, etc.)
   */
  taxonomicScope?: string;
  /**
   * A quality indicator for the purpose of the service
   */
  quality?: number;
  /**
   * Argumentation that describes the given quality score
   */
  reviewArgumentation?: string;
  authors?: unknown[];
  maintainers?: unknown[];
  /**
   * Email of the primary contact
   */
  contactEmail?: string;
  /**
   * Location of the facility hosting the service
   */
  facilityLocation?: string;
  /**
   * Link to the source DOI / PID of the virtual collection
   */
  sourceUrl?: string;
  /**
   * Link to the website covering a description of the service
   */
  websiteUrl?: string;
  /**
   * Link to the documentation of the service
   */
  documentationUrl?: string;
  /**
   * Boolean indicating if the service is paid for
   */
  paidService?: boolean;
  /**
   * Full description of the usage conditions tied to the service
   */
  usageConditions?: string;
  /**
   * A recognition towards the funders of the service
   */
  funders?: Funder[];
  /**
   * Object representing the service's software
   */
  software?: {
    /**
     * Link pointing to the source URL of the software, e.g. the GitHub repository
     */
    sourceUrl?: string;
    /**
     * Array holding the names of the required dependencies to run the service's software
     */
    dependencies?: {
      [k: string]: unknown;
    }[];
    /**
     * Boolean indicating if the software has been deprecated
     */
    deprecated?: boolean;
    /**
     * Array holding bug reports published by users of the service
     */
    bugReports?: BugReport[];
    [k: string]: unknown;
  };
  /**
   * Array of image Urls pointing to their respective sources
   */
  associatedMedia?: {
    [k: string]: unknown;
  }[];
  [k: string]: unknown;
}
export interface Funder {
  /**
   * Name of the funder
   */
  name?: string;
  /**
   * Link to the funder's website
   */
  referenceUrl?: string;
  /**
   * Link to the icon resource of the funder
   */
  logo?: string;
  [k: string]: unknown;
}
export interface BugReport {
  /**
   * Title of the bug report
   */
  title?: string;
  /**
   * Field holding the complete bug report's contents
   */
  description?: string;
  [k: string]: unknown;
}
